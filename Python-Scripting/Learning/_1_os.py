


# ðŸ“Œ 1. File and Directory Management

import os


# Functions to create, remove, list, and manipulate files/directories.

os.chdir(path) # â†’ Change the current working directory.

os.getcwd() # â†’ Get the current working directory.

os.listdir(path='.') # â†’ List files and directories in a path.

os.mkdir(path) # â†’ Create a new directory.

os.makedirs(path, exist_ok=False) # â†’ Create a directory (and parents if needed).

os.rmdir(path) â†’ Remove a directory (must be empty).

os.removedirs(path) â†’ Remove directories recursively.

os.rename(src, dst) â†’ Rename a file or directory.

os.replace(src, dst) â†’ Rename but overwrite if target exists.

os.remove(path) â†’ Delete a file.

os.stat(path) â†’ Get metadata (size, permissions, timestamps) about a file.

os.scandir(path='.') â†’ Iterate directory entries with metadata.

os.path submodule â†’ Path operations (join, split, exists, isdir, etc.).

Use case: Automating file organization, cleaning up temp files, or building deployment scripts.

# ðŸ“Œ 2. Environment Variables

# Functions to read and modify environment variables.

# os.environ â†’ Dictionary-like access to environment variables.

# os.getenv(key, default=None) â†’ Get an environment variable safely.

# os.putenv(key, value) â†’ Set an environment variable (not recommended; prefer os.environ).

# os.unsetenv(key) â†’ Remove an environment variable.

# Use case: Managing configuration for applications, accessing credentials, setting PATH.

# ðŸ“Œ 3. Process Management

# Functions for interacting with processes.

# os.system(command) â†’ Run a system command in a subshell.

# os.exec*() family (e.g., os.execvp) â†’ Replace current process with new one.

# os.spawn*() family â†’ Start new processes (less used; use subprocess).

# os.fork() (Unix only) â†’ Fork a new process.

# os.kill(pid, sig) â†’ Send a signal to a process.

# os.getpid() â†’ Get current process ID.

# os.getppid() â†’ Get parent process ID.

# os._exit(status) â†’ Exit a process immediately.

# Use case: Running background tasks, killing rogue processes, writing servers/daemons.

# ðŸ“Œ 4. User and Permissions

# Functions to check and manage file access and ownership.

# os.chmod(path, mode) â†’ Change file permissions.

# os.chown(path, uid, gid) â†’ Change file ownership (Unix only).

# os.umask(mask) â†’ Set file mode creation mask.

# os.access(path, mode) â†’ Check permissions (read, write, execute).

# os.getuid() / os.getgid() (Unix only) â†’ Get user/group ID.

# os.setuid(uid) / os.setgid(gid) â†’ Change user/group ID.

# Use case: Security checks before file access, managing multi-user applications.

# ðŸ“Œ 5. Path Operations (os.path)

# os.path.join(a, b) â†’ Safely join paths.

# os.path.abspath(path) â†’ Absolute path.

# os.path.basename(path) â†’ Get filename.

# os.path.dirname(path) â†’ Get directory name.

# os.path.exists(path) â†’ Check if path exists.

# os.path.isfile(path) / os.path.isdir(path) â†’ Check type.

# os.path.getsize(path) â†’ File size.

# os.path.splitext(path) â†’ Split filename and extension.

# os.path.isabs(path) â†’ Check if absolute path.

# Use case: Cross-platform path handling (Linux, Windows, macOS).

# ðŸ“Œ 6. File Descriptors & I/O

# Low-level file operations.

# os.open(path, flags, mode=0o777) â†’ Open file descriptor.

# os.read(fd, n) â†’ Read from file descriptor.

# os.write(fd, str) â†’ Write to file descriptor.

# os.close(fd) â†’ Close file descriptor.

# os.lseek(fd, pos, how) â†’ Move file pointer.

# os.dup(fd) / os.dup2(fd, fd2) â†’ Duplicate file descriptors.

# os.fsync(fd) â†’ Flush file to disk.

# os.pipe() â†’ Create a pipe.

# Use case: Building custom file systems, implementing IPC (inter-process communication).

# ðŸ“Œ 7. Temporary Files and Directories

# os.tmpfile() (removed in Python 3.0; use tempfile).

# os.makedirs() / os.removedirs() for temporary dir creation/deletion.

# Use case: Handling scratch files in scripts.

# ðŸ“Œ 8. System Information

# Functions to get system-related data.

# os.name â†’ Name of OS dependent module (posix, nt).

# os.uname() (Unix only) â†’ System information.

# os.cpu_count() â†’ Number of CPUs.

# os.getloadavg() (Unix only) â†’ System load averages.

# os.sysconf(name) (Unix only) â†’ Get system configuration.

# Use case: Resource monitoring, adaptive scaling.

# ðŸ“Œ 9. Working with Timestamps

# os.utime(path, times) â†’ Change access/modified times.

# os.stat(path).st_mtime â†’ Get modification time.

# Use case: Backup utilities, syncing tools.

# ðŸ“Œ 10. Advanced OS Features

# os.symlink(src, dst) â†’ Create symbolic link.

# os.link(src, dst) â†’ Create hard link.

# os.readlink(path) â†’ Read where a symlink points.

# os.path.islink(path) â†’ Check if path is a symlink.

# os.walk(path) â†’ Recursively walk through a directory tree.

# os.forkpty() (Unix only) â†’ Fork with a pseudo-terminal.

# Use case: Backup scripts, symlink management, recursive directory scans.

