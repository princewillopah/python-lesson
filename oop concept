                                     # CLASS
# =====================================================================================
# class Car:
#     pass
# ob1=Car()
# ob2=Car()
# ob1.name="Adanne"
# ob2.age=43
# print("%s is %d years old" %(ob1.name, ob2.age))


# class student:
#     def display(self,name):
#         print("FROM DISPLAY: you re welcome %s"%name)
# obj1=student()
# obj2=student()
# fn=input("enter firstname: ")
# sn=input("enter surname: ")
# obj1.display(fn)
# obj2.display(sn)
# print("you re welcome %s %s"%(obj1.display(fn),obj2.display(sn)))

# class student:
#     def display(self,name,age):
#         print("you re %d years old, mr %s"%(age,name))
# obj1=student()
# n=input("enter firstname: ")
# a=int(input("enter age: "))
# obj1.display(n,a)
# -------------------accessing object variable by method inside class-------------------
# class student:
#     classNum = 40
#     def display(self, name, age):
#         self.classNum
#         print("you re %d years old, mr %s and mine is %d" % (age, name,self.classNum))
# obj1 = student()
# n = input("enter firstname: ")
# a = int(input("enter age: "))
# obj1.display(n, a)
# -------------------accessing object variable by object outside the class-------------------
# class student:
#  classNum = 40
# s = student()
# print("accessing object variable: {}".format(s.classNum))
# -------------------accessing object variable by method inside class-------------------
# class student:
#     classNum = 40
#     def display(self, name, age):
#         self.classNum
#         print("you re %d years old, mr %s and mine is %d" % (age, name,self.classNum))
#         self.classNum +=2
#         print("you re %d years old, mr %s and mine is %d" % (age, name, self.classNum))
# obj1 = student()
# n = input("enter firstname: ")
# a = int(input("enter age: "))
# obj1.display(n, a)
# -------------------accessing object variable by method inside class-------------------
# class vehicle:
#     name="benz"
#     kind="car"
#     color="black"
#     value=1000000.00
#     def description(self):
#         desc_str="{} is a {} {} worth ${}".format(self.name,self.color,self.kind,self.value)
#         return  desc_str
# car1=vehicle()
#
# car2=vehicle()
# car2.name="TATA ZEE"
# car2.kind="truck"
# car2.color="brown"
# car2.value=5000000.00
#
# car3=vehicle()
# car3.name="rangr rover"
# car3.kind="jeep"
# car3.color="silver"
# car3.value=34000000.00
# print("FROM RETURNED FUNCTION WITH INITIAL: {}".format(car1.description()))
# print("FROM RETURNED FUNCTION FROM OBJ CAR2: {}".format(car2.description()))
# print("FROM RETURNED FUNCTION FROM OBJ CAR3: {}".format(car3.description()))

## -------------------accessing object variable from outside the class-------------------
# class student:
#     classNum = 40
#     def display(self, name, age):
#         self.name = name
#         student.classNum
#         print("you re %d years old, mr %s and mine is %d" % (age, name,student.classNum))
#         student.classNum +=2
#         print("you re %d years old, mr %s and mine is %d" % (age, name, student.classNum))
# obj1 = student()
# n = input("enter firstname: ")
# a = int(input("enter age: "))
# obj1.display(n, a)
# print("you re %s %d" % (obj1.name))

# -------------------accessing class variable and changing it-------------------
# class student:
#     classNum = 40
# s1 = student()
# s2 = student()
# s2.classNum=65
# print("accessing class variable: {}".format(s1.classNum))
# print("accessing a changed class variable: {}".format(s2.classNum))

#                                    CONTRUCTOR
# =====================================================================================
# class Car:
#     def __init__(self):
#         print("i have nothing to show" )
# Car()
# Car()


# class Car:
#     def __init__(self,name,make,price,colour):
#         self.name=name
#         self.make=make
#         self.price=price
#         self.colour=colour
# ob1=Car("E-class","Benz",7000000,"Black")
# ob2=Car("morano","Tata",2000000,"own")
# print("%s is %d %s car from %s" %(ob1.name, ob1.price, ob1.colour, ob1.make))
# print("%s is %d %s car from %s" %(ob2.name,ob2.price,ob2.colour,ob2.make))

# class Car:  #with class attribute/variables
#     Carname="Lambogini"
#     Carmake="Ford"
#     Carprice=30000000
#     Carcolour="Dark Blue"
#     def __init__(self,name,make,price,colour):
#         self.name=name
#         self.make=make
#         self.price=price
#         self.colour=colour
#         print("FROM __INIT__: %s is %d %s car from %s" % (name, price, colour,make))
# ob1=Car("E-class","Benz",7000000,"Black")
# ob2=Car("morano","Tata",2000000,"own")
# print("FROM OB1: %s is %d %s car from %s" %(ob1.name, ob1.price, ob1.colour, ob1.make))
# print("FROM OB2: %s is %d %s car from %s" %(ob2.name,ob2.price,ob2.colour,ob2.make))
# print("FROM CLASS VARIABLE VIA CAR: %s is %d %s car from %s" %(Car.Carname, Car.Carprice, Car.Carcolour, Car.Carmake)) #attribute can be accessed by class name "Car" or special class "__class__"
# print("FROM CLASS VARIABLE VIA __CLASS__%s is %d %s car from %s" %(ob1.__class__.Carname, ob1.__class__.Carprice,ob1.__class__.Carcolour, ob1.__class__.Carmake))

# ----------------------accessing inidivual objects of d methods--------------------
# class student:
#  classNum = 40
#  def __init__(self,name, age):
#      self.name=name
#      self.age=age
#      self.balance=12
#      self.cat=78
#      print("you re %d years old, mr %s " % (age, name))
#      print("you re %d years " % self.classNum) # or student.classNum
#      student.classNum += 3
#      print("you re %d " % (student.classNum))
# s = student("jk",45)
# print("balance is {} and credit is {}".format(s.balance,s.cat))

# ----------------------contructors and methods--------------------
# class Circle:
#     pi=3.142
#     def __init__(self, radius=2):
#        self.radius=radius
#     def area(self):
#         return self.radius*self.radius*Circle.pi
#     def setRadius(self,radius):
#         self.radius=radius
#     def getRadius(self):
#         return self.radius
#     def delever(self):
#         print("FROM INSIDE: radius is %.1f and area is %.1f" % (self.getRadius(), self.area()))
# obj=Circle()
# obj.delever()
# print("FROM OUTSIDE: radius is %.1f and area is %.1f"%(obj.getRadius(),obj.area()))
# n = float(input(" enter radius: "))
# obj.setRadius(n)
# obj.delever()
# print("FROM OUTSIDE:radius is {0} and area is {1}".format(obj.getRadius(),obj.area()))

# class shapes:
#     def __init__(self,lengnt,bredth):
#         self.lenght=lengnt
#         self.bredth=bredth
#         self.description="this shape has not been described yet"
#         self.author="nobody has claimed to make this shape yet"
#     def area(self):
#        return self.lenght*self.bredth
#     def perimiter(self):
#         return 2*self.lenght+2*self.bredth
#     def describe(self,text):
#         self.description=text
#     def authorName(self, text):
#         self.author=text
#     def scaleSize(self,scale):
#         self.lenght=self.lenght*scale
#         self.bredth=self.bredth*scale
#
# rectangle=shapes(3,2)
# print("AREA: %f"%rectangle.area())
# print("PERIMITER: %f"%rectangle.perimiter())
# print("DESCRIPTION: %s"%rectangle.describe("A wide retangle, more than twice as wide as it is tall"))
#

# class student:
#     def __init__(self,name):
#         self.name=name
#         self.marks=[]
#         print("welcome to this school, {}".format(name))
#     def addMark(self,ma):
#         self.marks.append(ma)
#     def getavg(self):
#         return sum(self.marks)/len(self.marks)
# student1=student("perter")
# student1.addMark(90)
# student1.addMark(50)
# student1.addMark(96)
# student1.addMark(70)
# student1.addMark(46)
# print("marks: ",student1.marks)
# print("average: ",student1.getavg())

# =============================================================
# import random
# class RandomGenerator:
#     def __init__(self):
#         self.min_number=0 #neccesary to set lower limit
#         self.max_number = 100
#     def getMaxNumber(self):
#         return self.max_number
#     def getMinNumber(self):
#         return self.min_number
#     def setMaxNumber(self,maxNum):
#         self.max_number=maxNum
#     def setMinNumber(self,minNum):
#         self.min_number=minNum
#     def getRandom(self):
#         return random.randint(self.min_number,self.max_number)
#
# ran=RandomGenerator()#INITIALS ARE ALREADY GENERATED
# for i in range(5): # print it five times
#     print(ran.getRandom())







# ===============olu1============================
# import time
# class Witches:
#    names=[]
#
#    def addNames(self,name):
#         self.names.append(name)
#    def getNames(self):
#         return self.names
#    def display(self):
#        # Name = Name[0].upper() + Name[1:]
#        print(self.names)
# obj=Witches()
# numberOfNames=int(input("enter number of names: "))
# for x in range(numberOfNames):
#    Name = input("Enter Name %d: "%(x+1))
#    Name=Name.lower()   #convert each letter to lower
#    obj.addNames(Name)
# print("============================THE REPORT========================================= ")
# n=obj.getNames()
# m=[x.capitalize() for x in n]
# p=', '.join(map(str,m))
# print("NAMES: ",p)
# print("------------------------------------------------------------------------------- ")
# ecounter=0
# gcounter=0
# count=1
# for i in range(len(obj.getNames())):
#     gcounter += obj.getNames()[i].count('g')
#     ecounter += obj.getNames()[i].count('e')
#     mm = obj.getNames()[i].capitalize()
#     if gcounter>ecounter:
#         print("(%d) %s contains %d \"e\" and %d \"g\" and thus, a GOOD witch: "%(count,mm,ecounter,gcounter))
#     elif ecounter > gcounter:
#         print("(%d) %s contains %d \"e\" and %d \"g\" and thus, an EVIL witch: " % (count,mm, ecounter, gcounter))
#     else:
#         print("(%d) %s contains %d \"e\" and %d \"g\" and thus, a NEUTRAL witch: " % (count,mm, ecounter, gcounter))
#     # obj.getNames()[0].upper() + obj.getNames()[1:]
#     ecounter = 0
#     gcounter = 0
#     count+=1
#     time.sleep(0.5)

 # ======================olu2==========================
# import time
# class Witches:
#    names=[]
#
#    def addNames(self,name):
#         self.names.append(name)
#    def getNames(self):
#         return self.names
#    def display(self):
#        # Name = Name[0].upper() + Name[1:]
#        print(self.names)
# obj=Witches()
# x=1
# xx="stop"
# while xx>0:
#    Name = input("Enter Name %d: "%(x))
#    Name=Name.lower()   #convert each letter to lower
#    obj.addNames(Name)
#    x+=1
# print("============================THE REPORT========================================= ")
# n=obj.getNames()
# m=[x.capitalize() for x in n]
# p=', '.join(map(str,m))
# print("NAMES: ",p)
# print("------------------------------------------------------------------------------- ")
# ecounter=0
# gcounter=0
# count=1
# for i in range(len(obj.getNames())):
#     gcounter += obj.getNames()[i].count('g')
#     ecounter += obj.getNames()[i].count('e')
#     mm = obj.getNames()[i].capitalize()
#     if gcounter>ecounter:
#         print("(%d) %s contains %d \"e\" and %d \"g\" and thus, a GOOD witch: "%(count,mm,ecounter,gcounter))
#     elif ecounter > gcounter:
#         print("(%d) %s contains %d \"e\" and %d \"g\" and thus, an EVIL witch: " % (count,mm, ecounter, gcounter))
#     else:
#         print("(%d) %s contains %d \"e\" and %d \"g\" and thus, a NEUTRAL witch: " % (count,mm, ecounter, gcounter))
#     # obj.getNames()[0].upper() + obj.getNames()[1:]
#     ecounter = 0
#     gcounter = 0
#     count+=1
#     time.sleep(0.5)

#/============================__init__================================================/

# class employee:
#     def __init__(self,weight):
#         self.height=15
#         self.weigh=weight
#     def e_employee(self):
#         self.name="tayo"
#         self.age=67
#         print("name= %s age=%s height=%d weight=%f"%(self.name,self.age,self.height, self.weigh))
#     def d_employee(self):
#         print("name= {} age={}".format(self.name, self.age))
#     @staticmethod
#     def display():
#         print("this is good")
# cc=employee(1.9)
# cc.display()
# cc.e_employee()
# cc.d_employee()
# print(cc.name )

# ==================== ABSTRACTION AND INHERITANC==========================
#          PROBLEM STATEMENT
# 1. implementing a library management system with the following tasks:
#     (a)the customer should be able to display all th books available in the library
#     (b) handle the process when a customer request to borrow a book
#     (c) update the library collection when a customer returns a book

# class Library:
#     def __init__(self,avaBook):
#         self.availableBooks=avaBook
#     def displayAvailableBooks(self):
#         print("-----------------------------------")
#         print("          Available Books")
#         print("-----------------------------------")
#         c=1
#         for bk in self.availableBooks:
#             print("(%d) %s"%(c,bk))
#             c+=1
#     def lendBook(self,requestedBook):
#         if requestedBook in self.availableBooks:
#             print("You have now borrowed the book")
#             self.availableBooks.remove(requestedBook)
#         else:
#             print("This book is not available")
#     def addBook(self,requestedBook):
#         self.availableBooks.append(requestedBook)
#         print("You have now returned the book")
#
# class Customer:
#     def requestBook(self):
#        print("Enter the name of books you wanna borrow")
#        self.book=input()
#        return self.book
#     def returnBook(self):
#         print("Enter the name of books you wanna return")
#         self.book = input()
#         return self.book
#
# lib=Library(["The Mafia Manager","48 Laws of Power","Art of Seduction","Art of War"])
# cus=Customer()
# while True:
#     print()
#     print("Enter 1 to display the available books")
#     print("Enter 2 to request a books")
#     print("Enter 3 to return books")
#     print("Enter 4 to exit ")
#
#     userChoice=int(input())
#     if userChoice is 1:
#         lib.displayAvailableBooks()
#     elif userChoice is 2:
#         reqBook=cus.requestBook()
#         lib.lendBook(reqBook)
#     elif userChoice is 3:
#          retBook = cus.returnBook()
#          lib.addBook(retBook)
#     elif userChoice is 4:
#          print("Thank you. Good Buy")
#          quit()
#     else:
#          print("You entered a wrong input")
#          quit()


# ==================== ABSTRACTION AND INHERITANC==========================
#          PROBLEM STATEMENT
# 1. implementing a library management system with the following tasks:
#     (a)the customer should be able to display all th books available in the library
#     (b) handle the process when a customer request to borrow a book
#     (c) update the library collection when a customer returns a book

class Library:
    def __init__(self,avaBook):
        self.availableBooks=avaBook
        # self.originalBook=avaBook
    def displayAvailableBooks(self):
        print("-------------------------------------")
        print("          Available Books")
        print("-------------------------------------")
        c=1
        for bk in self.availableBooks:
            print("(%d) %s"%(c,bk))
            c+=1
    # def update(self):
    def lendBook(self,requestedBook):
        if requestedBook in self.availableBooks:
            print("You have now borrowed the book")
            self.availableBooks.remove(requestedBook)
        else:
            print("This book is not available")
    def addBook(self,requestedBook):
        # for n in  self.availableBooks:
        #
        #
        # if self.availableBooks==self.originalBook:
             self.availableBooks.append(requestedBook)
             print("You have now returned the book")
        # else:
        #     print("This book is not part of our collection")
class Customer:
    def requestBook(self):
       print("Enter the name of books you wanna borrow")
       self.book=input()
       return self.book
    def returnBook(self):
        print("Enter the name of books you wanna return")
        self.book = input()
        return self.book

lib=Library(["The Mafia Manager","48 Laws of Power","Art of Seduction","Art of War"])
cus=Customer()
while True:
    print()
    print("Enter 1 to display the available books")
    print("Enter 2 to request a books")
    print("Enter 3 to return books")
    print("Enter 4 to exit ")

    userChoice=int(input())
    if userChoice is 1:
        lib.displayAvailableBooks()
    elif userChoice is 2:
        reqBook=cus.requestBook()
        lib.lendBook(reqBook)
    elif userChoice is 3:
         retBook = cus.returnBook()
         lib.addBook(retBook)
    elif userChoice is 4:
         print("Thank you. Good Buy")
         quit()

# ==================================single inheritance=======================================================
# class PlaneShapes:
#     lenght=2
#     bredth=3
#
#     def __init__(self):
#         print("the lenght is {} and height is {}".format(self.lenght,self.bredth))
#     def areaRectangle(self):
#         return self.lenght*self.bredth
# class solidShapes(PlaneShapes):
#       def cuboid(self):
#           return 6*self.areaRectangle()
# c=solidShapes()
# print(c.areaRectangle())
# print(c.cuboid())
# ==================================multiple inheritance=======================================================
# class GrandFather:
#     gnames="Ate-Opah"
#     familyNamily="opah"
# class Father:
#     fname="Rapheal"
#
# class son(GrandFather,Father):
#     def name(self,n):
#         if  n == self.familyNamily:
#             print("your father's name is {} and grand father's name is {}".format(self.fname,self.gnames))
#         else:
#             print("you re not from this village")
# c=son()
# nn=input("enter family name: ")
# nn=nn.lower()
# c.name(nn)
# ======================multilevel inheritances=============
# class GrandFather:
#     gnames="Ate-Opah"
#     familyNamily="opah"
# class Father(GrandFather):
#     fname="Rapheal"
#
# class son(Father):
#     def name(self,n):
#         if  n == self.familyNamily:
#             print("your father's name is {} and grand father's name is {}".format(self.fname,self.gnames))
#         else:
#             print("you re not from this village")
# c=son()
# nn=input("enter family name: ")
# nn=nn.lower()
# c.name(nn)
# =======================overriding polymorpheism=================================
# class A:
#    def met(self):
#        print("calling method 'met' from class D which is a drived method 'met' from class A:")
#
# class B(A):
#     def met(self):
#         print("calling method 'met' from class D which it  derived from B( which B drived and overrided from A):")
#
# class C(A):
#     def met(self):
#         print("calling method 'met' from class D which it  derived from C( which B drived and overrided from A):")
#
# class D(C,B):
#     pass
#
# d1=D()
# d1.met()

# ========================= SIMULATE A BANKING SYSTEM ===============================
#                          Problem statement
# (1) Give a prompt to the user asking if they wish to create a new Savings Account or access  an existing one
# (2) If the user would like to create a new account, accept their name and initial deposit, and create
#     a 5 digit random number and make it as the account number of their new Savings Account
# (3) if they are accessing an existing account, accept their name and account number to
#     validate the user, and give them options to withdraw, deposit or display their available balance

# from abc import ABCMeta,abstractmethod
# from random import randint
# class Account(metaclass=ABCMeta):
#     @abstractmethod
#     def createAccount():
#         return 0
#
#     @abstractmethod
#     def authenticate():
#         return 0
#
#     @abstractmethod
#     def withdraw():
#         return 0
#
#     @abstractmethod
#     def deposit():
#         return 0
#
#     @abstractmethod
#     def displayBalance():
#         return 0
#
# class SavingsAccount(Account):
#     def __init__(self):
#         self.savingsAccount={}
#     def createAccount(self, name, initialDeposit):
#         self.accountNumber=randint(10000, 99999)
#         self.savingsAccount[self.accountNumber]=[name,initialDeposit]
#     def authenticate(self, name, accountNumber):
#         pass
#     def withdraw(self, withdrawalAmount):
#         pass
#     def deposit(self, name, initialDeposit):
#         pass
#     def displayBalance(self):
#         pass

# from random import randint as r
# class RandomGenerator:
#     classvaa=25
#     def __init__(self):
#         self.min_number = 1111
#         self.max_number = 9999
#     def getMaxNumber(self):
#         return self.max_number
#     def getMinNumber(self):
#         return self.min_number
#     # def setMaxNumber(self, maxNum):
#     #     self.max_number = maxNum
#     # def setMinNumber(self, minNum):
#     #     self.min_number = minNum
#     def getRandom(self):
#         return r(self.min_number, self.max_number)
#
#     def displayresults(self):
#         print(self.min_number)
#         print(self.max_number)
#         print(self.max_number)
#         # print(self.maxNum)
#
# ran = RandomGenerator()  # INITIALS ARE ALREADY GENERATED
# for i in range(5):  # print it five times
#     print(ran.getRandom(),end=" ")
# print()
# ran.displayresults()



try:
    m = int(input(" first num"))
    print("ans=", m)
except:
    print("enter int plzzzz")
    m = int(input(" first num"))
    while m != 1 or m != 2:
       m = int(input(" first num"))
       print("ans=", m)








































